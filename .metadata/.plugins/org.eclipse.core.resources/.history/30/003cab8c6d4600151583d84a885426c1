package com.sample.tictactoe;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;


public class PlayGame {
	
	Integer[] winningMove1 = new Integer[] { 1,2,3 };
	Integer[] winningMove2 = new Integer[] { 4,5,6 };
	Integer[] winningMove3 = new Integer[] { 7,8,9 };
	Integer[] winningMove4 = new Integer[] { 1,4,7 };
	Integer[] winningMove5 = new Integer[] { 2,5,8 };
	Integer[] winningMove6 = new Integer[] { 3,6,9 };
	Integer[] winningMove7 = new Integer[] { 1,5,9 };
	Integer[] winningMove8 = new Integer[] { 7,5,3 };
	
	public void checkIfGameIsOver(HashMap<Integer,String> boardState){
		
			if (boardState.containsKey(winningMove1[0]) && boardState.containsKey(winningMove1[1]) && boardState.containsKey(winningMove1[2])){
				if ("x".equalsIgnoreCase(boardState.get(winningMove1[0])) && "x".equalsIgnoreCase(boardState.get(winningMove1[1])) && "x".equalsIgnoreCase(boardState.get(winningMove1[2]))){
					
				}
			}
		
	}
	
	
	
	public void findNextMove(HashMap<Integer,String> boardState){
		
		//Check if game is over
		
		
		
		ArrayList<HashMap<Integer, String>> allPossibleStates = new ArrayList<>();
		for (int i=1; i<=9; i++){
			if (!(boardState.containsKey(i))){
				HashMap<Integer, String> possibleBoardState = new HashMap<>();
				possibleBoardState.putAll(boardState);
				possibleBoardState.put(i, "x");
				allPossibleStates.add(possibleBoardState);
			}
		}
		
		for (HashMap<Integer,String> currentPossibleState : allPossibleStates){
			
		}
		
	}
	
	
	
	public void getUserMoveAndRespond(HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		
		
		String boardState = request.getParameter("boardState");
		ArrayList<String> userPositions = new ArrayList<String>(), 
				systemPositions = new ArrayList<String>(), 
				emptyPositions= new ArrayList<String>();
		JsonObject boardStatejsonObject = (JsonObject)new JsonParser().parse(boardState);
		if (boardStatejsonObject.isJsonObject()) {
			Set<Entry<String, JsonElement>> entries = ((JsonObject) boardStatejsonObject).entrySet();
			if (entries != null) {
				for (Entry<String, JsonElement> node : entries) {
					String currentState = node.getValue().getAsString();
					if (currentState.equalsIgnoreCase("s")){
						systemPositions.add(node.getKey());
					}else if (currentState.equalsIgnoreCase("u")){
						userPositions.add(node.getKey());
					}else if (currentState.equalsIgnoreCase("e")){
						emptyPositions.add(node.getKey());
					}
				}
			}
		} 

		//User positions, system positions & empty positions available, Please start the game

		if (userPositions.isEmpty() && systemPositions.isEmpty() && emptyPositions.size() == 9){
		}else{

		}



		//
		//		
		//		HttpSession session = request.getSession(true);
		//		ArrayList<String> systemSelectedpositions = new ArrayList<String>(), userSelectedPositions = new ArrayList<String>();
		//		if (null != session.getAttribute("systemSelectedPos") && null != session.getAttribute("userSelectedPos")){
		//			if (!(session.isNew())){
		//				systemSelectedpositions = (ArrayList<String>) session.getAttribute("systemSelectedPos");
		//				userSelectedPositions = (ArrayList<String>) session.getAttribute("userSelectedPos");
		//			}
		//		}
		//		String userPositionString = request.getParameter("position");
		//		userSelectedPositions.add(userPositionString);
		//		if ((userSelectedPositions.size() + systemSelectedpositions.size()) >= 8){
		//			response.setContentType("application/json");
		//			PrintWriter out = response.getWriter();
		//			out.print("{\"statusCode\":\"1115\",\"statusMessage\":\"Game Over!\"}");
		//			out.flush();
		//			return;
		//		}else{
		//
		//		}
	}



	public int calculateNextMove (ArrayList<String> userPositions, ArrayList<String> systemPositions){

		if ((userPositions.contains("1") && userPositions.contains("3")) || (userPositions.contains("1") && userPositions.contains("2")) || (userPositions.contains("2") && userPositions.contains("3"))){

		}

		return 1;
	}

	public int findBestPosition (ArrayList<String> availablePositions, ArrayList<String> userPositions){
		return (Integer) null;
	}

}
